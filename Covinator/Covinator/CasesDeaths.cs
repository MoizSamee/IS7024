// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var casesDeaths = CasesDeaths.FromJson(jsonString);

namespace QuickType
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CasesDeaths
    {
        [JsonProperty("submission_date")]
        public DateTimeOffset SubmissionDate { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("tot_cases")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TotCases { get; set; }

        [JsonProperty("conf_cases", NullValueHandling = NullValueHandling.Ignore)]
        public string ConfCases { get; set; }

        [JsonProperty("prob_cases", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? ProbCases { get; set; }

        [JsonProperty("new_case")]
        public string NewCase { get; set; }

        [JsonProperty("pnew_case", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? PnewCase { get; set; }

        [JsonProperty("tot_death")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TotDeath { get; set; }

        [JsonProperty("conf_death", NullValueHandling = NullValueHandling.Ignore)]
        public string ConfDeath { get; set; }

        [JsonProperty("prob_death", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? ProbDeath { get; set; }

        [JsonProperty("new_death")]
        public string NewDeath { get; set; }

        [JsonProperty("pnew_death", NullValueHandling = NullValueHandling.Ignore)]
        [JsonConverter(typeof(ParseStringConverter))]
        public long? PnewDeath { get; set; }

        [JsonProperty("created_at")]
        public DateTimeOffset CreatedAt { get; set; }

        [JsonProperty("consent_cases", NullValueHandling = NullValueHandling.Ignore)]
        public Consent? ConsentCases { get; set; }

        [JsonProperty("consent_deaths", NullValueHandling = NullValueHandling.Ignore)]
        public Consent? ConsentDeaths { get; set; }
    }

    public enum Consent { Agree, NA, NotAgree };

    public partial class CasesDeaths
    {
        public static CasesDeaths[] FromJson(string json) => JsonConvert.DeserializeObject<CasesDeaths[]>(json, QuickType.Converter.Settings);
    }

    public static class Serialize1
    {
        public static string ToJson(this CasesDeaths[] self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter1
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ConsentConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ConsentConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Consent) || t == typeof(Consent?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Agree":
                    return Consent.Agree;
                case "N/A":
                    return Consent.NA;
                case "Not agree":
                    return Consent.NotAgree;
            }
            throw new Exception("Cannot unmarshal type Consent");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Consent)untypedValue;
            switch (value)
            {
                case Consent.Agree:
                    serializer.Serialize(writer, "Agree");
                    return;
                case Consent.NA:
                    serializer.Serialize(writer, "N/A");
                    return;
                case Consent.NotAgree:
                    serializer.Serialize(writer, "Not agree");
                    return;
            }
            throw new Exception("Cannot marshal type Consent");
        }

        public static readonly ConsentConverter Singleton = new ConsentConverter();
    }

    internal class ParseStringConverter1 : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
